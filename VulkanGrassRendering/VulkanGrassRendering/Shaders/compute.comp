#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Blade {
	vec4 v0;
	vec4 v1;
	vec4 v2;
	vec4 up;
};

layout(binding = 2) buffer Blades {
	Blade blades[];
};

layout(binding = 3) buffer CulledBlades {
	Blade culledBlades[];
};

layout(binding = 4) uniform Time {
	float deltaTime;
	float totalTime;
};

layout(binding = 5) uniform MvpBufferObject {
	mat4 model;
	mat4 view;
	mat4 proj;
} mvp;

layout(binding = 6) buffer NumBlades {
	int numBlades;
};

bool inBounds(float value, float bounds) {
	return (value >= -bounds) && (value <= bounds);
}

void main() {
	// To update values in buffer, access like this: blades[gl_GlobalInvocationID.x].v0.y++;
	Blade blade = blades[gl_GlobalInvocationID.x];

	vec3 v0Position = blade.v0.xyz;
	vec3 v1Position = blade.v1.xyz;
	vec3 v2Position = blade.v2.xyz;
	vec3 bladeUp = blade.up.xyz;
	float direction = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;

	// Blade direction
	float sinTheta = sin(direction);
	float cosTheta = cos(direction);
	vec3 arbitraryVector = normalize(vec3(sinTheta, sinTheta + cosTheta, cosTheta));
	vec3 bladeDirection = normalize(cross(bladeUp, arbitraryVector));

	// *******************************
	// ******** UPDATE FORCES ********
	// *******************************

	// Recovery force
	vec3 iv2 = v0Position + (bladeUp * height);
	vec3 recovery = (iv2 - v2Position) * stiffness;

	// Gravity force
	vec3 gravityDirection = vec3(0.0, -1.0, 0.0);
	float gravityAcceleration = 9.8;
	vec3 environmentalGravity = normalize(gravityDirection) * gravityAcceleration;

	vec3 bladeFront = normalize(cross(bladeUp, bladeDirection));
	vec3 frontGravity = 0.25 * length(environmentalGravity) * bladeFront;

	vec3 gravity = environmentalGravity + frontGravity;

	// Wind force
	vec3 windDirection = vec3(1.0, 0.0, 0.0) * sin(totalTime);
	float directionalAlignment = 1.0 - abs(dot(normalize(windDirection), normalize(v2Position - v0Position)));
	float heightRatio = dot(v2Position - v0Position, bladeUp) / height;
	float windAlignment = directionalAlignment * heightRatio;
	vec3 wind = windDirection * windAlignment;

	// Calculate next v2
	vec3 v2Translation = (recovery + gravity + wind) * deltaTime;
	vec3 nextV2 = v2Position + v2Translation;
	nextV2 = nextV2 - (bladeUp * min(dot(bladeUp, nextV2), 0));

	// Calculate next v1
	float projectedLength = length(nextV2 - v0Position - (bladeUp * dot(nextV2 - v0Position, bladeUp)));
	vec3 nextV1 = v0Position + height * bladeUp * max(1.0 - (projectedLength / height), 0.05 * max(projectedLength / height, 1.0));

	// Approximate corrected length of the blade
	float L0 = length(nextV2 - v0Position);
	float L1 = length(nextV2 - nextV1) + length(nextV1 - v0Position);
	float L = 0.5 * (L0 + L1);
	float r = height / L;
	vec3 correctedV1 = v0Position + r * (nextV1 - v0Position);
	vec3 correctedV2 = correctedV1 + r * (nextV2 - nextV1);

	// Update blade state
	blade.v1 = vec4(correctedV1, height);
	blade.v2 = vec4(correctedV2, width);
	blades[gl_GlobalInvocationID.x] = blade;

	// *****************************
	// ******* CULL BLADES *********
	// *****************************

	mat3 inverseView = transpose(mat3(mvp.view));

	// Orientation test
	vec3 viewDirection = inverseView[2].xyz;
	bool orientationCull = abs(dot(viewDirection, bladeDirection)) > 0.9;

	// View-frustum test
	float tolerance = 0.5;
	mat4 VP = mvp.proj * mvp.view;

	vec4 ndcV0 = VP * vec4(v0Position, 1.0);
	ndcV0.w += tolerance;
	bool v0Visible = inBounds(ndcV0.x, ndcV0.w) || inBounds(ndcV0.y, ndcV0.w) || inBounds(ndcV0.x, ndcV0.w);

	vec4 bladeCenter = vec4(0.25 * v0Position + 0.5 * correctedV1 + 0.25 * correctedV2, 1.0);
	vec4 ndcBladeCenter = VP * bladeCenter;
	ndcBladeCenter += tolerance;
	bool bladeCenterVisible = inBounds(ndcBladeCenter.x, ndcBladeCenter.w) || inBounds(ndcBladeCenter.y, ndcBladeCenter.w) || inBounds(ndcBladeCenter.x, ndcBladeCenter.w);

	vec4 ndcV2 = VP * vec4(correctedV2, 1.0);
	ndcV2 += tolerance;
	bool v2Visible = inBounds(ndcV2.x, ndcV2.w) || inBounds(ndcV2.y, ndcV2.w) || inBounds(ndcV2.x, ndcV2.w);

	bool viewFrustumCull = !(v0Visible && bladeCenterVisible && v2Visible);

	// Distance test
	float maxDistance = 40.0;
	int numDepthLevels = 20;
	vec3 cameraPosition = -inverseView * mvp.view[3].xyz;
	float projectedDistance = length(v0Position - cameraPosition - bladeUp * dot(v0Position - cameraPosition, bladeUp));
	int distanceBucket = int(floor(numDepthLevels * (1.0 - (projectedDistance / maxDistance))));
	bool distanceCull = mod(gl_GlobalInvocationID.x, numDepthLevels) > distanceBucket;

	int finalIndex;
	if (!(orientationCull || viewFrustumCull || distanceCull)) {
		finalIndex = atomicAdd(numBlades, 1);
		culledBlades[finalIndex] = blade;
	}
}